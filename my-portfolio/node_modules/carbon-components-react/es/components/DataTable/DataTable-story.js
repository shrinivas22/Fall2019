function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { withKnobs, boolean, select } from '@storybook/addon-knobs';
import { withReadme } from 'storybook-readme';
import readme from './README.md';
import DataTable, { Table, TableActionList, TableBatchAction, TableBatchActions, TableBody, TableCell, TableContainer, TableExpandHeader, TableExpandRow, TableExpandedRow, TableHead, TableHeader, TableRow, TableSelectAll, TableSelectRow, TableToolbar, TableToolbarAction, TableToolbarContent, TableToolbarSearch, TableToolbarMenu } from '../DataTable';
var readmeURL = 'https://bit.ly/2Z9PGsC';

var props = function props() {
  return {
    useZebraStyles: boolean('Zebra row styles (useZebraStyles)', false),
    size: select('Row height (size)', {
      compact: 'compact',
      short: 'short',
      tall: 'tall',
      none: null
    }, null),
    stickyHeader: boolean('Sticky header (experimental)', false)
  };
};

export default {
  title: 'DataTable',
  decorators: [withKnobs],
  parameters: {
    component: DataTable,
    subcomponents: {
      Table: Table,
      TableActionList: TableActionList,
      TableBatchAction: TableBatchAction,
      TableBatchActions: TableBatchActions,
      TableBody: TableBody,
      TableCell: TableCell,
      TableContainer: TableContainer,
      TableExpandHeader: TableExpandHeader,
      TableExpandRow: TableExpandRow,
      TableExpandedRow: TableExpandedRow,
      TableHead: TableHead,
      TableHeader: TableHeader,
      TableRow: TableRow,
      TableSelectAll: TableSelectAll,
      TableSelectRow: TableSelectRow,
      TableToolbar: TableToolbar,
      TableToolbarAction: TableToolbarAction,
      TableToolbarContent: TableToolbarContent,
      TableToolbarSearch: TableToolbarSearch,
      TableToolbarMenu: TableToolbarMenu
    }
  }
};
export var Default = withReadme(readme, function () {
  return require('./stories/default').default(props());
});
Default.storyName = 'default';
Default.parameters = {
  info: {
    /* eslint-disable no-useless-escape */
    text: "\n      Data Tables are used to represent a collection of resources, displaying a\n      subset of their fields in columns, or headers. The `DataTable` component\n      that we export from Carbon requires two props to be passed in: `rows`\n      and `headers`.\n      You can find more detailed information surrounding usage of this component\n      at the following url: ".concat(readmeURL, "\n    ")
    /* eslint-enable no-useless-escape */

  }
};
export var WithToolbar = withReadme(readme, function () {
  return require('./stories/with-toolbar').default(props());
});
WithToolbar.storyName = 'with toolbar';
WithToolbar.parameters = {
  info: {
    text: "\n    DataTable with action menu and filtering.\n\n    You can find more detailed information surrounding usage of this component\n    at the following url: ".concat(readmeURL, "\n  ")
  }
};
export var WithSorting = withReadme(readme, function () {
  return require('./stories/with-sorting').default(props());
});
WithSorting.storyName = 'with sorting';
WithSorting.parameters = {
  info: {
    text: "\n    DataTable with sorting\n\n    You can find more detailed information surrounding usage of this component\n    at the following url: ".concat(readmeURL, "\n  ")
  }
};
export var WithSelection = withReadme(readme, function () {
  return require('./stories/with-selection').default(props());
});
WithSelection.storyName = 'with selection';
WithSelection.parameters = {
  info: {
    text: "\n    DataTable with selection\n\n    You can find more detailed information surrounding usage of this component\n    at the following url: ".concat(readmeURL, "\n  ")
  }
};
export var WithRadioButtonSelection = withReadme(readme, function () {
  return require('./stories/with-selection--radio').default(props());
});
WithRadioButtonSelection.storyName = 'with radio button selection';
WithRadioButtonSelection.parameters = {
  info: {
    text: "\n    DataTable with radio button selection\n\n    You can find more detailed information surrounding usage of this component\n    at the following url: ".concat(readmeURL, "\n  ")
  }
};
export var WithExpansion = withReadme(readme, function () {
  return require('./stories/with-expansion').default(props());
});
WithExpansion.storyName = 'with expansion';
WithExpansion.parameters = {
  info: {
    text: "\n      DataTable with expansion\n\n      You can find more detailed information surrounding usage of this component\n      at the following url: ".concat(readmeURL, "\n    ")
  }
};
export var WithBatchExpansion = withReadme(readme, function () {
  return require('./stories/with-batch-expansion').default(props());
});
WithBatchExpansion.storyName = 'with batch expansion';
WithBatchExpansion.parameters = {
  info: {
    text: "\n      DataTable with batch expansion\n\n      You can find more detailed information surrounding usage of this component\n      at the following url: ".concat(readmeURL, "\n    ")
  }
};
export var WithBatchActions = withReadme(readme, function () {
  return require('./stories/with-batch-actions').default(props());
});
WithBatchActions.storyName = 'with batch actions';
WithBatchActions.parameters = {
  info: {
    text: "\n      Uses <TableToolbar> alongside <TableBatchActions> and <TableBatchAction>\n      to create the toolbar and placeholder for where the batch action menu will\n      be displayed.\n\n      You can use the `getBatchActionProps` prop getter on the\n      <TableBatchActions> component to have it wire up the ghost menu for you.\n\n      Individual <TableBatchAction> components take in any kind of event handler\n      prop that you would expect to use, like `onClick`. You can use these\n      alongside the `selectedRows` property in your `render` prop function\n      to pass along this info to your batch action handler.\n\n      You can find more detailed information surrounding usage of this component\n      at the following url: ".concat(readmeURL, "\n    ")
  }
};
export var WithDynamicContent = withReadme(readme, function () {
  return require('./stories/with-dynamic-content').default(props());
});
WithDynamicContent.storyName = 'with dynamic content';
WithDynamicContent.parameters = {
  info: {
    text: "\n    Showcases DataTable behavior when rows are added to the component,\n    and when cell data changes dynamically.\n  "
  }
};
export var WithBooleanColumn = withReadme(readme, function () {
  return require('./stories/with-boolean-column').default(props());
});
WithBooleanColumn.storyName = 'with boolean column';
WithBooleanColumn.parameters = {
  info: {
    text: "\n    DataTable with toolbar and filtering with column has boolean value.\n  "
  }
};
export var WithOptions = withReadme(readme, function () {
  return require('./stories/with-options').default(props());
});
WithOptions.storyName = 'with options';
WithOptions.parameters = {
  info: {
    text: "\n    DataTable with options like disabled, isSelected, isExpanded etc.\n\n    You can find more detailed information surrounding usage of this component\n    at the following url: ".concat(readmeURL, "\n  ")
  }
};
export var WithOverflowMenu = withReadme(readme, function () {
  return require('./stories/with-overflow-menu').default(_objectSpread(_objectSpread({}, props()), {}, {
    overflowMenuOnHover: boolean('Show overflow menu on hover (overflowMenuOnHover)', false)
  }));
});
WithOverflowMenu.storyName = 'with overflow menu';
WithOverflowMenu.parameters = {
  info: {
    text: "\n  DataTable with Overflow menus added.\n\n  You can find more detailed information surrounding usage of this component\n  at the following url: ".concat(readmeURL, "\n")
  }
};