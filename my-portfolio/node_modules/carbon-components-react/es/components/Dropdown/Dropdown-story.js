function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { action } from '@storybook/addon-actions';
import { withKnobs, boolean, select, text } from '@storybook/addon-knobs';
import Dropdown from '../Dropdown';
import DropdownSkeleton from './Dropdown.Skeleton';
import WithState from '../../tools/withState';
var items = [{
  id: 'option-0',
  text: 'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Vitae, aliquam. Blanditiis quia nemo enim voluptatibus quos ducimus porro molestiae nesciunt error cumque quaerat, tempore vero unde eum aperiam eligendi repellendus.'
}, {
  id: 'option-1',
  text: 'Option 1'
}, {
  id: 'option-2',
  text: 'Option 2'
}, {
  id: 'option-3',
  text: 'Option 3'
}, {
  id: 'option-4',
  text: 'Option 4'
}, {
  id: 'option-5',
  text: 'Option 5'
}];
var stringItems = ['Option 1', 'Option 2', 'Option 3', 'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Vitae, aliquam. Blanditiis quia nemo enim voluptatibus quos ducimus porro molestiae nesciunt error cumque quaerat, tempore vero unde eum aperiam eligendi repellendus.', 'Option 5', 'Option 6'];
var sizes = {
  'Extra large size (xl)': 'xl',
  'Default size': undefined,
  'Small size (sm)': 'sm'
};
var directions = {
  'Bottom (default)': 'bottom',
  'Top ': 'top'
};

var props = function props() {
  return {
    id: text('Dropdown ID (id)', 'carbon-dropdown-example'),
    size: select('Field size (size)', sizes, undefined) || undefined,
    direction: select('Dropdown direction (direction)', directions, 'bottom'),
    label: text('Label (label)', 'Dropdown menu options'),
    ariaLabel: text('Aria Label (ariaLabel)', 'Dropdown'),
    disabled: boolean('Disabled (disabled)', false),
    light: boolean('Light variant (light)', false),
    titleText: text('Title (titleText)', 'This is a dropdown title.'),
    helperText: text('Helper text (helperText)', 'This is some helper text.'),
    invalid: boolean('Show form validation UI (invalid)', false),
    invalidText: text('Form validation UI content (invalidText)', 'A valid value is required')
  };
};

export default {
  title: 'Dropdown',
  decorators: [withKnobs],
  parameters: {
    component: Dropdown,
    subcomponents: {
      DropdownSkeleton: DropdownSkeleton
    }
  }
};
export var Default = function Default() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(Dropdown, _extends({}, props(), {
    items: items,
    itemToString: function itemToString(item) {
      return item ? item.text : '';
    },
    onChange: action('onChange')
  })));
};
Default.storyName = 'default';
Default.parameters = {
  info: {
    text: 'Dropdown'
  }
};
export var Inline = function Inline() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 600
    }
  }, /*#__PURE__*/React.createElement(Dropdown, _extends({}, props(), {
    type: "inline",
    items: items,
    itemToString: function itemToString(item) {
      return item ? item.text : '';
    },
    onChange: action('onChange')
  })));
};
Inline.storyName = 'inline';
Inline.parameters = {
  info: {
    text: 'Dropdown'
  }
};
export var ItemsAsStrings = function ItemsAsStrings() {
  return /*#__PURE__*/React.createElement("div", {
    style: props.inline ? {
      width: 500
    } : {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(Dropdown, _extends({}, props(), {
    items: stringItems,
    onChange: action('onChange')
  })));
};
ItemsAsStrings.storyName = 'items as strings';
ItemsAsStrings.parameters = {
  info: {
    text: 'Rendering an array of strings as `items`'
  }
};
export var FullyControlled = function FullyControlled() {
  return /*#__PURE__*/React.createElement(WithState, {
    initialState: {
      selectedItem: items[0]
    }
  }, function (_ref) {
    var state = _ref.state,
        setState = _ref.setState;
    return /*#__PURE__*/React.createElement("div", {
      style: {
        width: 300
      }
    }, /*#__PURE__*/React.createElement(Dropdown, _extends({}, props(), {
      items: items,
      itemToString: function itemToString(item) {
        return item ? item.text : '';
      },
      onChange: function onChange(_ref2) {
        var selectedItem = _ref2.selectedItem;
        return setTimeout(function () {
          return setState({
            selectedItem: selectedItem
          });
        }, 1000);
      },
      selectedItem: state.selectedItem
    })));
  });
};
FullyControlled.storyName = 'fully controlled';
FullyControlled.parameters = {
  info: {
    text: "\n        Sometimes you want to control everything.\n      "
  }
};
export var Skeleton = function Skeleton() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(DropdownSkeleton, null), "\xA0", /*#__PURE__*/React.createElement(DropdownSkeleton, {
    inline: true
  }));
};
Skeleton.storyName = 'skeleton';
Skeleton.parameters = {
  info: {
    text: "\n        Placeholder skeleton state to use when content is loading.\n      "
  }
};